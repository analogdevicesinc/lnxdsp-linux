
# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/timer/adi,sc5xx-gptimers.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: General Purpose Timers for Analog Devices SC5XX Processors

maintainers:
  - Nathan Barrett-Morrison <nathan.morrison@timesys.com>
  - Greg Malysa <greg.malysa@timesys.com>

description: |
  This driver controls the General Purpose Timers on the Analog
  Devices SC5XX processor family

properties:
  compatible:
    enum:
      - adi,sc5xx-gptimers

  reg:
    minItems: 1
    maxItems: 1

  clocks:
    description:
      Specifies the reference clock used by gptimers
    minItems: 1
    maxItems: 1

  '#address-cells':
    const: 1

  '#size-cells':
    const: 0

    child-node:
      description: General Purpose Timer Number (1 of 8)
      type: object
      properties:
        reg:
          description: GPTimer Number (0 through 7)
          minItems: 1
          maxItems: 1
        interrupt-parent:
          description: Parent Interrupt Controller
          minItems: 1
          maxItems: 1
        interrupts:
          description: Parent Interrupt Controller Number
          minItems: 1
          maxItems: 1
        adi,offset:
          description: Offset into base reg to access GPTimer
          minItems: 1
          maxItems: 1
        adi,is-clocksource:
          description: Use this timer as a clocksource
          type: boolean
        adi,reset-timer:
          description: Reset timer during initialization
          type: boolean
      required:
        - reg
        - interrupt-parent
        - interrupts
        - adi,offset

required:
  - compatible
  - reg
  - clocks
  - '#address-cells'
  - '#size-cells'

additionalProperties: false

examples:
  - |
    gptimers: gptimers@0x31018000 {
      compatible = "adi,sc5xx-gptimers";
      reg = <0x31018000 0x200>;
      clocks = <&clk ADSP_SC598_CLK_CGU0_SCLK0>;
      status = "okay";
      #address-cells = <1>;
      #size-cells = <0>;

      gptimer0: gptimer@0 {
        reg = <0>;
        interrupt-parent = <&gic>;
        interrupts = <GIC_SPI 48 IRQ_TYPE_LEVEL_HIGH>;
        adi,offset = <0x60>;
        adi,is-clocksource;
        adi,reset-timer;
      };

      gptimer1: gptimer@1 {
        reg = <1>;
        interrupt-parent = <&gic>;
        interrupts = <GIC_SPI 49 IRQ_TYPE_LEVEL_HIGH>;
        adi,offset = <0x80>;
        adi,is-clockevent;
        adi,reset-timer;
      };

      gptimer2: gptimer@2 {
        reg = <2>;
        interrupt-parent = <&gic>;
        interrupts = <GIC_SPI 50 IRQ_TYPE_LEVEL_HIGH>;
        adi,offset = <0xa0>;
      };

      gptimer3: gptimer@3 {
        reg = <3>;
        interrupt-parent = <&gic>;
        interrupts = <GIC_SPI 51 IRQ_TYPE_LEVEL_HIGH>;
        adi,offset = <0xc0>;
      };

      gptimer4: gptimer@4 {
        reg = <4>;
        interrupt-parent = <&gic>;
        interrupts = <GIC_SPI 52 IRQ_TYPE_LEVEL_HIGH>;
        adi,offset = <0xe0>;
      };

      gptimer5: gptimer@5 {
        reg = <5>;
        interrupt-parent = <&gic>;
        interrupts = <GIC_SPI 53 IRQ_TYPE_LEVEL_HIGH>;
        adi,offset = <0x100>;
      };

      gptimer6: gptimer@6 {
        reg = <6>;
        interrupt-parent = <&gic>;
        interrupts = <GIC_SPI 54 IRQ_TYPE_LEVEL_HIGH>;
        adi,offset = <0x120>;
      };

      gptimer7: gptimer@7 {
        reg = <7>;
        interrupt-parent = <&gic>;
        interrupts = <GIC_SPI 55 IRQ_TYPE_LEVEL_HIGH>;
        adi,offset = <0x140>;
      };
    };